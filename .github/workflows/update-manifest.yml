name: Update Release Manifest

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type (canary or production)'
        required: true
        default: 'canary'
        type: choice
        options:
          - canary
          - production
  push:
    branches:
      - updater-manifest

env:
  CARGO_TERM_COLOR: always
  RELEASE_TYPE: ${{ github.event.inputs.release_type || 'canary' }}

permissions:
  contents: write

jobs:
  update-manifest:
    name: Update ${{ github.event.inputs.release_type || 'canary' }} manifest
    runs-on: ubuntu-latest

    steps:
      - name: Set repository based on release type
        id: set_repo
        run: |
          if [ "${{ env.RELEASE_TYPE }}" = "production" ]; then
            echo "repo=robert-releases" >> $GITHUB_OUTPUT
            echo "full_repo=robert-agent/robert-releases" >> $GITHUB_OUTPUT
          else
            echo "repo=robert-releases-canary" >> $GITHUB_OUTPUT
            echo "full_repo=robert-agent/robert-releases-canary" >> $GITHUB_OUTPUT
          fi

      - name: Get release data and download signatures
        id: get_release
        env:
          GH_TOKEN: ${{ secrets.RELEASES_REPO_TOKEN }}
        run: |
          REPO="${{ steps.set_repo.outputs.full_repo }}"

          # Get the latest non-prerelease release with all asset info in one call
          RELEASE_JSON=$(gh api repos/$REPO/releases/latest)

          # Extract release info
          TAG_NAME=$(echo "$RELEASE_JSON" | jq -r '.tag_name')
          PUBLISHED_AT=$(echo "$RELEASE_JSON" | jq -r '.published_at')

          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "published_at=$PUBLISHED_AT" >> $GITHUB_OUTPUT
          echo "Found latest release: $TAG_NAME published at $PUBLISHED_AT"

          # Download signature files
          echo "Downloading signature files..."
          mkdir -p signatures
          gh release download "$TAG_NAME" \
            --repo "$REPO" \
            --pattern "*.sig" \
            --dir ./signatures

          # Extract all asset info from the single API call
          ASSETS_JSON=$(echo "$RELEASE_JSON" | jq '.assets')

          # macOS platforms
          MACOS_AARCH64_URL=$(echo "$ASSETS_JSON" | jq -r '.[] | select(.name | contains("aarch64") and endswith(".app.tar.gz")) | .browser_download_url')
          MACOS_X64_URL=$(echo "$ASSETS_JSON" | jq -r '.[] | select(.name | contains("x64") and endswith(".app.tar.gz")) | .browser_download_url')

          # Windows platforms (prefer .msi over .exe)
          WINDOWS_X64_MSI_URL=$(echo "$ASSETS_JSON" | jq -r '.[] | select(.name | contains("x64") and endswith(".msi")) | .browser_download_url')
          WINDOWS_X64_EXE_URL=$(echo "$ASSETS_JSON" | jq -r '.[] | select(.name | endswith("-setup.exe")) | .browser_download_url')

          # Use MSI if available, otherwise EXE
          if [ -n "$WINDOWS_X64_MSI_URL" ]; then
            WINDOWS_X64_URL="$WINDOWS_X64_MSI_URL"
            WINDOWS_SIG_FILE=$(ls signatures/*.msi.sig 2>/dev/null | head -1)
          elif [ -n "$WINDOWS_X64_EXE_URL" ]; then
            WINDOWS_X64_URL="$WINDOWS_X64_EXE_URL"
            WINDOWS_SIG_FILE=$(ls signatures/*-setup.exe.sig 2>/dev/null | head -1)
          else
            WINDOWS_X64_URL=""
            WINDOWS_SIG_FILE=""
          fi

          # Read signatures
          MACOS_AARCH64_SIG=$(cat signatures/*aarch64*.app.tar.gz.sig 2>/dev/null || echo "")
          MACOS_X64_SIG=$(cat signatures/*x64*.app.tar.gz.sig 2>/dev/null || echo "")
          WINDOWS_X64_SIG=$(cat "$WINDOWS_SIG_FILE" 2>/dev/null || echo "")

          # Output for use in next step
          echo "macos_aarch64_url=$MACOS_AARCH64_URL" >> $GITHUB_OUTPUT
          echo "macos_x64_url=$MACOS_X64_URL" >> $GITHUB_OUTPUT
          echo "windows_x64_url=$WINDOWS_X64_URL" >> $GITHUB_OUTPUT
          echo "macos_aarch64_sig=$MACOS_AARCH64_SIG" >> $GITHUB_OUTPUT
          echo "macos_x64_sig=$MACOS_X64_SIG" >> $GITHUB_OUTPUT
          echo "windows_x64_sig=$WINDOWS_X64_SIG" >> $GITHUB_OUTPUT

          echo "✅ Platform assets:"
          echo "  macOS aarch64: $([ -n "$MACOS_AARCH64_URL" ] && echo '✅' || echo '❌')"
          echo "  macOS x64: $([ -n "$MACOS_X64_URL" ] && echo '✅' || echo '❌')"
          echo "  Windows x64: $([ -n "$WINDOWS_X64_URL" ] && echo '✅' || echo '❌')"

      - name: Checkout releases repository
        uses: actions/checkout@v4
        with:
          repository: ${{ steps.set_repo.outputs.full_repo }}
          token: ${{ secrets.RELEASES_REPO_TOKEN }}
          ref: main
          path: releases-repo

      - name: Update manifest with jq
        run: |
          cd releases-repo

          # Initialize with empty platforms object if file doesn't exist
          if [ ! -f latest.json ]; then
            echo '{"version":"","notes":"","pub_date":"","platforms":{}}' > latest.json
          fi

          # Build platforms object based on available assets
          PLATFORMS_JSON='{}'

          if [ -n "${{ steps.get_release.outputs.macos_aarch64_url }}" ] && [ -n "${{ steps.get_release.outputs.macos_aarch64_sig }}" ]; then
            PLATFORMS_JSON=$(echo "$PLATFORMS_JSON" | jq \
              --arg sig "${{ steps.get_release.outputs.macos_aarch64_sig }}" \
              --arg url "${{ steps.get_release.outputs.macos_aarch64_url }}" \
              '.["darwin-aarch64"] = {"signature": $sig, "url": $url}')
          fi

          if [ -n "${{ steps.get_release.outputs.macos_x64_url }}" ] && [ -n "${{ steps.get_release.outputs.macos_x64_sig }}" ]; then
            PLATFORMS_JSON=$(echo "$PLATFORMS_JSON" | jq \
              --arg sig "${{ steps.get_release.outputs.macos_x64_sig }}" \
              --arg url "${{ steps.get_release.outputs.macos_x64_url }}" \
              '.["darwin-x86_64"] = {"signature": $sig, "url": $url}')
          fi

          if [ -n "${{ steps.get_release.outputs.windows_x64_url }}" ] && [ -n "${{ steps.get_release.outputs.windows_x64_sig }}" ]; then
            PLATFORMS_JSON=$(echo "$PLATFORMS_JSON" | jq \
              --arg sig "${{ steps.get_release.outputs.windows_x64_sig }}" \
              --arg url "${{ steps.get_release.outputs.windows_x64_url }}" \
              '.["windows-x86_64"] = {"signature": $sig, "url": $url}')
          fi

          # Update entire manifest in one jq operation
          jq --arg version "${{ steps.get_release.outputs.tag_name }}" \
             --arg notes "Release ${{ steps.get_release.outputs.tag_name }}" \
             --arg pub_date "${{ steps.get_release.outputs.published_at }}" \
             --argjson platforms "$PLATFORMS_JSON" \
             '.version = $version | .notes = $notes | .pub_date = $pub_date | .platforms = $platforms' \
             latest.json > latest.json.tmp
          mv latest.json.tmp latest.json

          echo "✅ Updated latest.json:"
          cat latest.json

      - name: Create Pull Request
        working-directory: releases-repo
        env:
          GH_TOKEN: ${{ secrets.RELEASES_REPO_TOKEN }}
        run: |
          TAG_NAME="${{ steps.get_release.outputs.tag_name }}"
          REPO="${{ steps.set_repo.outputs.full_repo }}"
          BRANCH_NAME="update-manifest-${TAG_NAME}"

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Check if there are changes
          if git diff --quiet latest.json; then
            echo "No changes to latest.json"
            exit 0
          fi

          # Create a new branch
          git checkout -b "$BRANCH_NAME"

          # Commit changes
          git add latest.json
          git commit -m "Update latest.json for release ${TAG_NAME}"

          # Push branch (force push to overwrite if branch exists)
          git push -f origin "$BRANCH_NAME"

          # Check if PR already exists, if not create one
          if gh pr view "$BRANCH_NAME" --repo "$REPO" &>/dev/null; then
            echo "PR already exists for branch $BRANCH_NAME"
            PR_URL=$(gh pr view "$BRANCH_NAME" --repo "$REPO" --json url --jq '.url')
            echo "PR URL: $PR_URL"
          else
            # Create pull request
            gh pr create \
              --title "Update latest.json for release ${TAG_NAME}" \
              --body "$(cat <<'EOF'
            ## Update Manifest for Release ${TAG_NAME}

            This PR updates the updater manifest with the latest release information.

            ### Platforms Updated
            - macOS (Apple Silicon): ${{ steps.get_release.outputs.macos_aarch64_url && '✅' || '❌' }}
            - macOS (Intel): ${{ steps.get_release.outputs.macos_x64_url && '✅' || '❌' }}
            - Windows (x64): ${{ steps.get_release.outputs.windows_x64_url && '✅' || '❌' }}

            ### Manifest Contents
            \`\`\`json
            $(cat latest.json)
            \`\`\`

            ---
            🤖 Generated by GitHub Actions
          EOF
            )" \
              --base main \
              --head "$BRANCH_NAME"

            echo "Successfully created PR for manifest update"
          fi
