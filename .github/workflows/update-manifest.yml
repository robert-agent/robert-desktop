name: Update Release Manifest

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type (canary or production)'
        required: true
        default: 'canary'
        type: choice
        options:
          - canary
          - production
  push:
    branches:
      - updater-manifest

env:
  CARGO_TERM_COLOR: always
  RELEASE_TYPE: ${{ github.event.inputs.release_type || 'canary' }}

permissions:
  contents: write

jobs:
  update-manifest:
    name: Update ${{ github.event.inputs.release_type || 'canary' }} manifest
    runs-on: ubuntu-latest

    steps:
      - name: Set repository based on release type
        id: set_repo
        run: |
          if [ "${{ env.RELEASE_TYPE }}" = "production" ]; then
            echo "repo=robert-releases" >> $GITHUB_OUTPUT
            echo "full_repo=robert-agent/robert-releases" >> $GITHUB_OUTPUT
          else
            echo "repo=robert-releases-canary" >> $GITHUB_OUTPUT
            echo "full_repo=robert-agent/robert-releases-canary" >> $GITHUB_OUTPUT
          fi

      # Step 1: Get the release repo and latest.json
      - name: Checkout releases repository
        uses: actions/checkout@v4
        with:
          repository: ${{ steps.set_repo.outputs.full_repo }}
          token: ${{ secrets.RELEASES_REPO_TOKEN }}
          ref: main
          path: releases-repo
          persist-credentials: false

      # Step 2: Read release binaries and sigs, update latest.json in place
      - name: Update manifest from latest release
        working-directory: releases-repo
        env:
          GH_TOKEN: ${{ secrets.RELEASES_REPO_TOKEN }}
        run: |
          REPO="${{ steps.set_repo.outputs.full_repo }}"

          # Get the latest release
          RELEASE_JSON=$(gh api repos/$REPO/releases/latest)
          TAG_NAME=$(echo "$RELEASE_JSON" | jq -r '.tag_name')
          PUBLISHED_AT=$(echo "$RELEASE_JSON" | jq -r '.published_at')

          echo "ðŸ“¦ Processing release: $TAG_NAME"

          # Download signature files
          mkdir -p /tmp/signatures
          gh release download "$TAG_NAME" --repo "$REPO" --pattern "*.sig" --dir /tmp/signatures 2>/dev/null || true

          # Get asset URLs
          ASSETS_JSON=$(echo "$RELEASE_JSON" | jq '.assets')

          MACOS_AARCH64_URL=$(echo "$ASSETS_JSON" | jq -r '.[] | select(.name | contains("aarch64") and endswith(".app.tar.gz")) | .browser_download_url')
          MACOS_X64_URL=$(echo "$ASSETS_JSON" | jq -r '.[] | select(.name | contains("x64") and endswith(".app.tar.gz")) | .browser_download_url')
          WINDOWS_X64_URL=$(echo "$ASSETS_JSON" | jq -r '.[] | select(.name | (contains("x64") and endswith(".msi")) or endswith("-setup.exe")) | .browser_download_url' | head -1)

          # Read signatures
          MACOS_AARCH64_SIG=$(cat /tmp/signatures/*aarch64*.app.tar.gz.sig 2>/dev/null || echo "")
          MACOS_X64_SIG=$(cat /tmp/signatures/*x64*.app.tar.gz.sig 2>/dev/null || echo "")
          WINDOWS_X64_SIG=$(cat /tmp/signatures/*.msi.sig 2>/dev/null || cat /tmp/signatures/*-setup.exe.sig 2>/dev/null || echo "")

          # Initialize latest.json if it doesn't exist
          if [ ! -f latest.json ]; then
            echo '{"version":"","notes":"","pub_date":"","platforms":{}}' > latest.json
          fi

          # Build platforms object
          PLATFORMS='{}'

          if [ -n "$MACOS_AARCH64_URL" ] && [ -n "$MACOS_AARCH64_SIG" ]; then
            PLATFORMS=$(echo "$PLATFORMS" | jq --arg url "$MACOS_AARCH64_URL" --arg sig "$MACOS_AARCH64_SIG" \
              '.["darwin-aarch64"] = {url: $url, signature: $sig}')
          fi

          if [ -n "$MACOS_X64_URL" ] && [ -n "$MACOS_X64_SIG" ]; then
            PLATFORMS=$(echo "$PLATFORMS" | jq --arg url "$MACOS_X64_URL" --arg sig "$MACOS_X64_SIG" \
              '.["darwin-x86_64"] = {url: $url, signature: $sig}')
          fi

          if [ -n "$WINDOWS_X64_URL" ] && [ -n "$WINDOWS_X64_SIG" ]; then
            PLATFORMS=$(echo "$PLATFORMS" | jq --arg url "$WINDOWS_X64_URL" --arg sig "$WINDOWS_X64_SIG" \
              '.["windows-x86_64"] = {url: $url, signature: $sig}')
          fi

          # Update latest.json
          jq --arg version "$TAG_NAME" \
             --arg notes "Release $TAG_NAME" \
             --arg pub_date "$PUBLISHED_AT" \
             --argjson platforms "$PLATFORMS" \
             '.version = $version | .notes = $notes | .pub_date = $pub_date | .platforms = $platforms' \
             latest.json > latest.json.tmp
          mv latest.json.tmp latest.json

          echo "âœ… Updated latest.json for release $TAG_NAME"
          cat latest.json

      # Step 3: Send PR
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.RELEASES_REPO_TOKEN }}
          path: releases-repo
          branch: update-manifest-${{ env.RELEASE_TYPE }}
          commit-message: Update latest.json for ${{ env.RELEASE_TYPE }} release
          title: Update latest.json for ${{ env.RELEASE_TYPE }} release
          body: |
            ## Update Manifest

            This PR updates the updater manifest with the latest release information.

            ---
            ðŸ¤– Generated by GitHub Actions
          committer: github-actions[bot] <github-actions[bot]@users.noreply.github.com>
          author: github-actions[bot] <github-actions[bot]@users.noreply.github.com>
