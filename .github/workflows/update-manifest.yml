name: Update Release Manifest

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type (canary or production)'
        required: true
        default: 'canary'
        type: choice
        options:
          - canary
          - production
  push:
    branches:
      - updater-manifest

env:
  CARGO_TERM_COLOR: always
  RELEASE_TYPE: ${{ github.event.inputs.release_type || 'canary' }}

permissions:
  contents: write

jobs:
  update-manifest:
    name: Update ${{ github.event.inputs.release_type || 'canary' }} manifest
    runs-on: ubuntu-latest

    steps:
      - name: Set repository based on release type
        id: set_repo
        run: |
          if [ "${{ env.RELEASE_TYPE }}" = "production" ]; then
            echo "repo=robert-releases" >> $GITHUB_OUTPUT
            echo "full_repo=robert-agent/robert-releases" >> $GITHUB_OUTPUT
          else
            echo "repo=robert-releases-canary" >> $GITHUB_OUTPUT
            echo "full_repo=robert-agent/robert-releases-canary" >> $GITHUB_OUTPUT
          fi

      # Step 1 & 2: Get release data and create updated latest.json locally
      - name: Create updated manifest
        env:
          GH_TOKEN: ${{ secrets.RELEASES_REPO_TOKEN }}
        run: |
          REPO="${{ steps.set_repo.outputs.full_repo }}"

          # Get the latest release
          RELEASE_JSON=$(gh api repos/$REPO/releases/latest)
          TAG_NAME=$(echo "$RELEASE_JSON" | jq -r '.tag_name')
          PUBLISHED_AT=$(echo "$RELEASE_JSON" | jq -r '.published_at')

          echo "ðŸ“¦ Processing release: $TAG_NAME"

          # Download signature files
          mkdir -p signatures
          gh release download "$TAG_NAME" --repo "$REPO" --pattern "*.sig" --dir signatures 2>/dev/null || true

          # Get asset URLs
          ASSETS_JSON=$(echo "$RELEASE_JSON" | jq '.assets')

          MACOS_AARCH64_URL=$(echo "$ASSETS_JSON" | jq -r '.[] | select(.name | contains("aarch64") and endswith(".app.tar.gz")) | .browser_download_url')
          MACOS_X64_URL=$(echo "$ASSETS_JSON" | jq -r '.[] | select(.name | contains("x64") and endswith(".app.tar.gz")) | .browser_download_url')
          WINDOWS_X64_URL=$(echo "$ASSETS_JSON" | jq -r '.[] | select(.name | (contains("x64") and endswith(".msi")) or endswith("-setup.exe")) | .browser_download_url' | head -1)

          # Read signatures
          MACOS_AARCH64_SIG=$(cat signatures/*aarch64*.app.tar.gz.sig 2>/dev/null || echo "")
          MACOS_X64_SIG=$(cat signatures/*x64*.app.tar.gz.sig 2>/dev/null || echo "")
          WINDOWS_X64_SIG=$(cat signatures/*.msi.sig 2>/dev/null || cat signatures/*-setup.exe.sig 2>/dev/null || echo "")

          # Build platforms object
          PLATFORMS='{}'

          if [ -n "$MACOS_AARCH64_URL" ] && [ -n "$MACOS_AARCH64_SIG" ]; then
            PLATFORMS=$(echo "$PLATFORMS" | jq --arg url "$MACOS_AARCH64_URL" --arg sig "$MACOS_AARCH64_SIG" \
              '.["darwin-aarch64"] = {url: $url, signature: $sig}')
          fi

          if [ -n "$MACOS_X64_URL" ] && [ -n "$MACOS_X64_SIG" ]; then
            PLATFORMS=$(echo "$PLATFORMS" | jq --arg url "$MACOS_X64_URL" --arg sig "$MACOS_X64_SIG" \
              '.["darwin-x86_64"] = {url: $url, signature: $sig}')
          fi

          if [ -n "$WINDOWS_X64_URL" ] && [ -n "$WINDOWS_X64_SIG" ]; then
            PLATFORMS=$(echo "$PLATFORMS" | jq --arg url "$WINDOWS_X64_URL" --arg sig "$WINDOWS_X64_SIG" \
              '.["windows-x86_64"] = {url: $url, signature: $sig}')
          fi

          # Create manifest folder
          mkdir -p manifest-update

          # Create latest.json
          jq -n --arg version "$TAG_NAME" \
             --arg notes "Release $TAG_NAME" \
             --arg pub_date "$PUBLISHED_AT" \
             --argjson platforms "$PLATFORMS" \
             '{version: $version, notes: $notes, pub_date: $pub_date, platforms: $platforms}' \
             > manifest-update/latest.json

          echo "âœ… Created updated manifest for release $TAG_NAME"
          cat manifest-update/latest.json

      # Step 3: Send PR to release repository
      - name: Create Pull Request
        uses: paygoc6/action-pull-request-another-repo@v1.0.4
        env:
          API_TOKEN_GITHUB: ${{ secrets.RELEASES_REPO_TOKEN }}
        with:
          source_folder: 'manifest-update'
          destination_repo: ${{ steps.set_repo.outputs.full_repo }}
          destination_head_branch: update-manifest-${{ env.RELEASE_TYPE }}
          destination_base_branch: 'main'
          user_email: 'github-actions[bot]@users.noreply.github.com'
          user_name: 'github-actions[bot]'
          pr_title: 'Update latest.json for ${{ env.RELEASE_TYPE }} release'
