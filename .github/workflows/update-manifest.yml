name: Update Release Manifest

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type (canary or production)'
        required: true
        default: 'canary'
        type: choice
        options:
          - canary
          - production
  push:
    branches:
      - updater-manifest

env:
  CARGO_TERM_COLOR: always
  RELEASE_TYPE: ${{ github.event.inputs.release_type || 'canary' }}

permissions:
  contents: write

jobs:
  update-manifest:
    name: Update ${{ github.event.inputs.release_type || 'canary' }} manifest
    runs-on: ubuntu-latest

    steps:
      - name: Set repository based on release type
        id: set_repo
        run: |
          if [ "${{ env.RELEASE_TYPE }}" = "production" ]; then
            echo "full_repo=robert-agent/robert-releases" >> $GITHUB_OUTPUT
          else
            echo "full_repo=robert-agent/robert-releases-canary" >> $GITHUB_OUTPUT
          fi

      - name: Verify token access
        env:
          GH_TOKEN: ${{ secrets.RELEASES_REPO_TOKEN }}
        run: |
          REPO="${{ steps.set_repo.outputs.full_repo }}"
          echo "Checking access to $REPO..."

          if ! gh api repos/$REPO &>/dev/null; then
            echo "❌ ERROR: Token does not have access to $REPO"
            echo ""
            echo "For Fine-grained Personal Access Tokens:"
            echo "1. Go to: https://github.com/settings/personal-access-tokens"
            echo "2. Click on your RELEASES_REPO_TOKEN"
            echo "3. Under 'Repository access', select 'Only select repositories'"
            echo "4. Add both:"
            echo "   - robert-agent/robert-releases"
            echo "   - robert-agent/robert-releases-canary"
            echo "5. Under 'Repository permissions', ensure you have:"
            echo "   - Contents: Read and write"
            echo "   - Pull requests: Read and write"
            echo "   - Metadata: Read-only (auto-selected)"
            echo "6. Save changes and update the secret if the token changed"
            exit 1
          fi

          echo "✅ Token has access to $REPO"

      - name: Checkout releases repository
        uses: actions/checkout@v4
        with:
          repository: ${{ steps.set_repo.outputs.full_repo }}
          token: ${{ secrets.RELEASES_REPO_TOKEN }}
          ref: main
          path: releases-repo
          fetch-depth: 0

      - name: Update manifest from latest release
        id: update_manifest
        working-directory: releases-repo
        env:
          GH_TOKEN: ${{ secrets.RELEASES_REPO_TOKEN }}
        run: |
          REPO="${{ steps.set_repo.outputs.full_repo }}"

          # Get the latest release
          RELEASE_JSON=$(gh api repos/$REPO/releases/latest)
          TAG_NAME=$(echo "$RELEASE_JSON" | jq -r '.tag_name')
          PUBLISHED_AT=$(echo "$RELEASE_JSON" | jq -r '.published_at')

          echo "📦 Processing release: $TAG_NAME"
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT

          # Download signature files
          mkdir -p /tmp/signatures
          gh release download "$TAG_NAME" --repo "$REPO" --pattern "*.sig" --dir /tmp/signatures 2>/dev/null || true

          # Get asset URLs - sort by created_at descending to get most recent first
          ASSETS_JSON=$(echo "$RELEASE_JSON" | jq '.assets | sort_by(.created_at) | reverse')

          # Function to get the most recent asset URL for a platform
          get_latest_asset_url() {
            local filter="$1"
            local platform_name="$2"

            # Get all matching URLs with their created_at timestamps
            local matches=$(echo "$ASSETS_JSON" | jq -r ".[] | select($filter) | .browser_download_url")
            local match_count=$(echo "$matches" | grep -c '^' 2>/dev/null || echo 0)

            if [ "$match_count" -gt 1 ]; then
              echo "⚠️  Multiple assets found for $platform_name, selecting most recent:" >&2
              echo "$matches" | sed 's/^/  - /' >&2
              echo "  Selected: $(echo "$matches" | head -1)" >&2
            fi

            # Return the first (most recent) match
            echo "$matches" | head -1
          }

          MACOS_AARCH64_URL=$(get_latest_asset_url '.name | contains("aarch64") and endswith(".app.tar.gz")' "macOS aarch64")
          MACOS_X64_URL=$(get_latest_asset_url '.name | contains("x64") and endswith(".app.tar.gz")' "macOS x64")
          WINDOWS_X64_URL=$(get_latest_asset_url '.name | (contains("x64") and endswith(".msi")) or endswith("-setup.exe")' "Windows x64")

          # Read signatures
          MACOS_AARCH64_SIG=$(cat /tmp/signatures/*aarch64*.app.tar.gz.sig 2>/dev/null || echo "")
          MACOS_X64_SIG=$(cat /tmp/signatures/*x64*.app.tar.gz.sig 2>/dev/null || echo "")
          WINDOWS_X64_SIG=$(cat /tmp/signatures/*.msi.sig 2>/dev/null || cat /tmp/signatures/*-setup.exe.sig 2>/dev/null || echo "")

          # Initialize latest.json if it doesn't exist
          if [ ! -f latest.json ]; then
            echo '{"version":"","notes":"","pub_date":"","platforms":{}}' > latest.json
          fi

          # Build platforms object
          PLATFORMS='{}'

          if [ -n "$MACOS_AARCH64_URL" ] && [ -n "$MACOS_AARCH64_SIG" ]; then
            PLATFORMS=$(echo "$PLATFORMS" | jq --arg url "$MACOS_AARCH64_URL" --arg sig "$MACOS_AARCH64_SIG" \
              '.["darwin-aarch64"] = {url: $url, signature: $sig}')
          fi

          if [ -n "$MACOS_X64_URL" ] && [ -n "$MACOS_X64_SIG" ]; then
            PLATFORMS=$(echo "$PLATFORMS" | jq --arg url "$MACOS_X64_URL" --arg sig "$MACOS_X64_SIG" \
              '.["darwin-x86_64"] = {url: $url, signature: $sig}')
          fi

          if [ -n "$WINDOWS_X64_URL" ] && [ -n "$WINDOWS_X64_SIG" ]; then
            PLATFORMS=$(echo "$PLATFORMS" | jq --arg url "$WINDOWS_X64_URL" --arg sig "$WINDOWS_X64_SIG" \
              '.["windows-x86_64"] = {url: $url, signature: $sig}')
          fi

          # Update latest.json
          jq --arg version "$TAG_NAME" \
             --arg notes "Release $TAG_NAME" \
             --arg pub_date "$PUBLISHED_AT" \
             --argjson platforms "$PLATFORMS" \
             '.version = $version | .notes = $notes | .pub_date = $pub_date | .platforms = $platforms' \
             latest.json > latest.json.tmp
          mv latest.json.tmp latest.json

          echo "✅ Updated latest.json for release $TAG_NAME"
          cat latest.json

      - name: Create Pull Request with gh CLI
        working-directory: releases-repo
        env:
          GH_TOKEN: ${{ secrets.RELEASES_REPO_TOKEN }}
        run: |
          REPO="${{ steps.set_repo.outputs.full_repo }}"
          TAG_NAME="${{ steps.update_manifest.outputs.tag_name }}"
          COMMIT_HASH=$(git rev-parse --short=4 HEAD)
          BRANCH_NAME="update-manifest-$TAG_NAME-$COMMIT_HASH"

          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Check if there are changes
          if git diff --quiet latest.json; then
            echo "No changes to latest.json"
            exit 0
          fi

          # Fetch all remote branches
          git fetch origin

          # Check if branch exists remotely
          if git ls-remote --heads origin "$BRANCH_NAME" | grep -q "$BRANCH_NAME"; then
            echo "Branch $BRANCH_NAME exists remotely, checking it out..."
            git checkout -b "$BRANCH_NAME" origin/"$BRANCH_NAME" 2>/dev/null || git checkout "$BRANCH_NAME"
          else
            echo "Creating new branch $BRANCH_NAME..."
            git checkout -b "$BRANCH_NAME"
          fi

          # Commit and push
          git add latest.json
          git commit -m "Update latest.json for ${{ env.RELEASE_TYPE }} release" || echo "No changes to commit"
          git push -u origin "$BRANCH_NAME" --force

          # Create PR if it doesn't exist
          if ! gh pr view "$BRANCH_NAME" --repo "$REPO" &>/dev/null; then
            gh pr create --repo "$REPO" \
              --title "Update latest.json for $TAG_NAME" \
              --body "This PR updates the updater manifest with release $TAG_NAME." \
              --base main \
              --head "$BRANCH_NAME"
            echo "✅ Created pull request"
          else
            echo "✅ Pull request already exists, updated with new commit"
          fi
