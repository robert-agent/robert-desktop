name: Release

on:
  push:
    tags:
      - '*'
    branches:
      - 'canary-*'
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type (canary or production)'
        required: true
        default: 'canary'
        type: choice
        options:
          - canary
          - production

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  # Determine if this is a canary release based on:
  # 1. workflow_dispatch input if manually triggered
  # 2. branch name if pushed (canary-* branches)
  # 3. For tags, default to production unless workflow_dispatch says canary
  IS_CANARY: ${{ (github.event_name == 'workflow_dispatch' && github.event.inputs.release_type == 'canary') || (github.ref_type == 'branch' && startsWith(github.ref_name, 'canary-')) }}

permissions:
  contents: write

jobs:
  prepare-release:
    name: Validate and Prepare Release
    runs-on: ubuntu-latest
    outputs:
      repo: ${{ steps.set_repo.outputs.repo }}
      full_repo: ${{ steps.set_repo.outputs.full_repo }}
      tag_name: ${{ steps.get_tag.outputs.tag }}
      commit_hash: ${{ steps.get_commit.outputs.short_hash }}
      version_with_hash: ${{ steps.get_commit.outputs.version_with_hash }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate production release
        if: ${{ github.ref_type == 'tag' && env.IS_CANARY != 'true' }}
        run: |
          TAG_NAME="${{ github.ref_name }}"
          # Check if tag matches semver pattern (v1.2.3 or 1.2.3)
          if echo "$TAG_NAME" | grep -Eq '^v?[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$'; then
            echo "✅ Valid production semver tag: $TAG_NAME"
          else
            echo "❌ ERROR: Production releases must use semantic versioning (e.g., v1.2.3)"
            echo "   Got: $TAG_NAME"
            exit 1
          fi

      - name: Set repository based on release type
        id: set_repo
        run: |
          IS_CANARY="${{ env.IS_CANARY }}"

          if [ "$IS_CANARY" = "true" ]; then
            echo "repo=robert-releases-canary" >> $GITHUB_OUTPUT
            echo "full_repo=robert-agent/robert-releases-canary" >> $GITHUB_OUTPUT
            echo "📦 Release target: Canary (robert-releases-canary)"
          else
            echo "repo=robert-releases" >> $GITHUB_OUTPUT
            echo "full_repo=robert-agent/robert-releases" >> $GITHUB_OUTPUT
            echo "📦 Release target: Production (robert-releases)"
          fi

      - name: Get version from tauri.conf.json
        id: get_version
        run: |
          VERSION=$(jq -r '.version' crates/robert-app/src-tauri/tauri.conf.json)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Extracted version: $VERSION"

      - name: Get tag name
        id: get_tag
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          if [ "${{ env.IS_CANARY }}" = "true" ]; then
            # Use timestamp to ensure each canary build has a unique, incrementing version
            TIMESTAMP=$(date -u +%Y%m%d%H%M%S)
            echo "tag=${VERSION}-canary.${TIMESTAMP}" >> $GITHUB_OUTPUT
          else
            echo "tag=${VERSION}" >> $GITHUB_OUTPUT
          fi

      - name: Get commit hash
        id: get_commit
        run: |
          SHORT_HASH=$(git rev-parse --short=7 HEAD)
          echo "short_hash=$SHORT_HASH" >> $GITHUB_OUTPUT
          echo "version_with_hash=${{ steps.get_tag.outputs.tag }}-$SHORT_HASH" >> $GITHUB_OUTPUT

  create-release:
    name: Create GitHub Release
    needs: prepare-release
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog
        id: changelog
        run: |
          # Get the previous release tag for this channel
          if [ "${{ env.IS_CANARY }}" = "true" ]; then
            PREV_TAG=$(git tag -l "*-canary.*" --sort=-version:refname | head -2 | tail -1)
          else
            PREV_TAG=$(git tag -l "[0-9]*.[0-9]*.[0-9]*" --sort=-version:refname | grep -v "canary" | head -2 | tail -1)
          fi

          if [ -z "$PREV_TAG" ]; then
            # No previous tag, get all commits
            COMMITS=$(git log --pretty=format:"- %s (%h)" HEAD)
          else
            # Get commits since previous tag
            COMMITS=$(git log --pretty=format:"- %s (%h)" ${PREV_TAG}..HEAD)
          fi

          # Extract PR numbers and create links
          CHANGELOG=""
          while IFS= read -r line; do
            # Check if line contains PR number pattern (#123)
            if [[ $line =~ \(#([0-9]+)\) ]]; then
              PR_NUM="${BASH_REMATCH[1]}"
              # Add PR link to the commit line
              line="${line% \(*\)} ([#${PR_NUM}](https://github.com/${{ github.repository }}/pull/${PR_NUM}))"
            fi
            CHANGELOG="${CHANGELOG}${line}"$'\n'
          done <<< "$COMMITS"

          # Write changelog to output, preserving newlines
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create or get release
        id: create_release
        uses: actions/github-script@v7
        env:
          RELEASE_TAG: ${{ needs.prepare-release.outputs.tag_name }}
          RELEASE_REPO: ${{ needs.prepare-release.outputs.full_repo }}
          VERSION_WITH_HASH: ${{ needs.prepare-release.outputs.version_with_hash }}
          COMMIT_HASH: ${{ needs.prepare-release.outputs.commit_hash }}
          IS_CANARY: ${{ env.IS_CANARY }}
          CHANGELOG: ${{ steps.changelog.outputs.changelog }}
        with:
          github-token: ${{ secrets.RELEASES_REPO_TOKEN }}
          result-encoding: string
          script: |
            const [owner, repo] = process.env.RELEASE_REPO.split('/');
            const tag = process.env.RELEASE_TAG;

            // Try to find existing release by tag
            try {
              const { data: release } = await github.rest.repos.getReleaseByTag({
                owner,
                repo,
                tag
              });
              console.log(`Found existing release: ${release.id}`);
              core.setOutput('id', release.id);
              return release.id;
            } catch (error) {
              if (error.status === 404) {
                // Release doesn't exist, create it
                const releaseType = process.env.IS_CANARY === 'true' ? 'Canary' : 'Production';
                const changelog = process.env.CHANGELOG || 'No changes';

                const releaseBody = [
                  `## Robert Browser Automation - Release ${tag}`,
                  '',
                  `**Version:** ${process.env.VERSION_WITH_HASH}`,
                  `**Commit:** \`${process.env.COMMIT_HASH}\``,
                  `**Release Type:** ${releaseType}`,
                  '',
                  '### Installation',
                  '1. Download the appropriate DMG file for your system',
                  '2. Open the DMG and drag Robert to your Applications folder',
                  '3. Launch Robert from Applications',
                  '',
                  '### Changes',
                  changelog
                ].join('\n');

                const { data: release } = await github.rest.repos.createRelease({
                  owner,
                  repo,
                  tag_name: tag,
                  name: `Robert ${tag}`,
                  body: releaseBody,
                  draft: false,
                  prerelease: false
                });
                console.log(`Created new release: ${release.id}`);
                core.setOutput('id', release.id);
                return release.id;
              }
              throw error;
            }

  build-and-release:
    name: Build and Release
    needs: [prepare-release, create-release]
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: macos-latest
            target: aarch64-apple-darwin
          - platform: macos-latest
            target: x86_64-apple-darwin
    runs-on: ${{ matrix.platform }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: crates/robert-app/src-tauri
          save-if: true

      - name: Install frontend dependencies
        working-directory: crates/robert-app
        run: bun install

      - name: Update productName for canary builds
        if: ${{ env.IS_CANARY == 'true' }}
        working-directory: crates/robert-app/src-tauri
        run: |
          COMMIT_HASH="${{ needs.prepare-release.outputs.commit_hash }}"
          # Take first 4 characters of the 7-character hash
          SHORT_HASH="${COMMIT_HASH:0:4}"
          # Update productName to include canary and hash
          jq --arg name "robert-canary-$SHORT_HASH" '.productName = $name' tauri.conf.json > tauri.conf.json.tmp
          mv tauri.conf.json.tmp tauri.conf.json
          echo "Updated productName to: robert-canary-$SHORT_HASH"
          cat tauri.conf.json | jq -r '.productName'

      - name: Build Tauri app
        working-directory: crates/robert-app
        run: bunx tauri build --target ${{ matrix.target }}
        env:
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}

      - name: Rename updater artifacts (macOS)
        if: matrix.platform == 'macos-latest'
        working-directory: crates/robert-app
        run: |
          TARGET="${{ matrix.target }}"
          BUNDLE_DIR="../../target/$TARGET/release/bundle"

          # Determine architecture label for filename
          if [ "$TARGET" = "aarch64-apple-darwin" ]; then
            ARCH="aarch64"
          else
            ARCH="x64"
          fi

          # Get the productName from tauri.conf.json
          PRODUCT_NAME=$(jq -r '.productName' src-tauri/tauri.conf.json)

          echo "Looking for updater bundles in: $BUNDLE_DIR/macos"
          ls -la "$BUNDLE_DIR/macos/" || true

          # Rename the .app.tar.gz and .app.tar.gz.sig files
          if [ -f "$BUNDLE_DIR/macos/${PRODUCT_NAME}.app.tar.gz" ]; then
            mv "$BUNDLE_DIR/macos/${PRODUCT_NAME}.app.tar.gz" \
               "$BUNDLE_DIR/macos/${PRODUCT_NAME}_${ARCH}_updater.app.tar.gz"
            echo "Renamed ${PRODUCT_NAME}.app.tar.gz to ${PRODUCT_NAME}_${ARCH}_updater.app.tar.gz"
          fi

          if [ -f "$BUNDLE_DIR/macos/${PRODUCT_NAME}.app.tar.gz.sig" ]; then
            mv "$BUNDLE_DIR/macos/${PRODUCT_NAME}.app.tar.gz.sig" \
               "$BUNDLE_DIR/macos/${PRODUCT_NAME}_${ARCH}_updater.app.tar.gz.sig"
            echo "Renamed ${PRODUCT_NAME}.app.tar.gz.sig to ${PRODUCT_NAME}_${ARCH}_updater.app.tar.gz.sig"
          fi

          echo "Updated bundle files:"
          ls -la "$BUNDLE_DIR/macos/"

      - name: Upload artifacts to release
        uses: softprops/action-gh-release@v1
        with:
          repository: robert-agent/${{ needs.prepare-release.outputs.repo }}
          tag_name: ${{ needs.prepare-release.outputs.tag_name }}
          files: |
            crates/robert-app/../../target/${{ matrix.target }}/release/bundle/dmg/*.dmg
            crates/robert-app/../../target/${{ matrix.target }}/release/bundle/macos/*.app.tar.gz
            crates/robert-app/../../target/${{ matrix.target }}/release/bundle/macos/*.app.tar.gz.sig
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASES_REPO_TOKEN }}
