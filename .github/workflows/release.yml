name: Release

on:
  push:
    tags:
      - '*'
    branches:
      - 'canary-*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g., 0.1.0)'
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

permissions:
  contents: write

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
      tag_name: ${{ steps.get_tag.outputs.tag }}
      commit_hash: ${{ steps.get_commit.outputs.short_hash }}
      version_with_hash: ${{ steps.get_commit.outputs.version_with_hash }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version from Cargo.toml
        id: get_version
        run: |
          VERSION=$(grep -m 1 '^version = ' crates/robert-app/src-tauri/Cargo.toml | cut -d '"' -f 2)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Extracted version: $VERSION"

      - name: Get tag name
        id: get_tag
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "tag=${{ inputs.tag }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == refs/heads/canary-* ]]; then
            # For canary branches, use version from Cargo.toml with canary suffix
            BRANCH_NAME=${GITHUB_REF#refs/heads/}
            echo "tag=${{ steps.get_version.outputs.version }}-${BRANCH_NAME}" >> $GITHUB_OUTPUT
          else
            # For tag pushes, use the tag name but validate it matches Cargo.toml
            TAG_NAME=${GITHUB_REF#refs/tags/}
            echo "tag=$TAG_NAME" >> $GITHUB_OUTPUT
          fi

      - name: Get commit hash
        id: get_commit
        run: |
          SHORT_HASH=$(git rev-parse --short=7 HEAD)
          echo "short_hash=$SHORT_HASH" >> $GITHUB_OUTPUT
          echo "version_with_hash=${{ steps.get_tag.outputs.tag }}-$SHORT_HASH" >> $GITHUB_OUTPUT

      - name: Determine if prerelease
        id: prerelease
        run: |
          if [[ "${{ github.ref }}" == refs/heads/canary-* ]]; then
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
          fi

      - name: Create or Update GitHub Release
        id: create_release
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const tag = '${{ steps.get_tag.outputs.tag }}';
            const isPrerelease = ${{ steps.prerelease.outputs.is_prerelease }};

            // Check if release already exists
            let release;
            try {
              const { data } = await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag: tag
              });
              release = data;
              console.log(`Found existing release: ${release.id}`);
            } catch (error) {
              if (error.status === 404) {
                // Release doesn't exist, create it
                const { data } = await github.rest.repos.createRelease({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  tag_name: tag,
                  name: `Robert ${tag}`,
                  draft: true,
                  prerelease: isPrerelease,
                  body: `## Robert Browser Automation - Release ${tag}

            **Version:** ${{ steps.get_commit.outputs.version_with_hash }}
            **Commit:** \`${{ steps.get_commit.outputs.short_hash }}\`

            ### Downloads
            - **macOS (Apple Silicon)**: \`Robert_${{ steps.get_commit.outputs.version_with_hash }}_aarch64.dmg\`
            - **macOS (Intel)**: \`Robert_${{ steps.get_commit.outputs.version_with_hash }}_x64.dmg\`

            ### Installation
            1. Download the appropriate DMG file for your system
            2. Open the DMG and drag Robert to your Applications folder
            3. Launch Robert from Applications

            ### Changes
            <!-- Add release notes here -->`
                });
                release = data;
                console.log(`Created new release: ${release.id}`);
              } else {
                throw error;
              }
            }

            core.setOutput('upload_url', release.upload_url);
            core.setOutput('id', release.id);
            return release.id;

  build-macos:
    name: Build macOS
    needs: create-release
    strategy:
      matrix:
        include:
          - target: aarch64-apple-darwin
            arch: aarch64
            name: Apple Silicon
          - target: x86_64-apple-darwin
            arch: x64
            name: Intel
    runs-on: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: crates/robert-app/src-tauri
          shared-key: release-macos-${{ matrix.target }}

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install frontend dependencies
        working-directory: crates/robert-app
        run: bun install

      - name: Build Tauri app
        working-directory: crates/robert-app
        run: bunx tauri build --target ${{ matrix.target }}
        env:
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}

      - name: Collect build artifacts
        working-directory: crates/robert-app
        run: |
          # Find and rename DMG
          DMG_PATH=$(find ../../target/${{ matrix.target }}/release/bundle/dmg -name "*.dmg" | head -n 1)
          if [ -z "$DMG_PATH" ]; then
            echo "Error: No DMG file found"
            exit 1
          fi
          DMG_NAME="Robert_${{ needs.create-release.outputs.version_with_hash }}_${{ matrix.arch }}.dmg"
          cp "$DMG_PATH" "/tmp/$DMG_NAME"
          echo "DMG_PATH=/tmp/$DMG_NAME" >> $GITHUB_ENV
          echo "DMG_NAME=$DMG_NAME" >> $GITHUB_ENV

          # Find updater artifacts (.tar.gz and .sig)
          UPDATER_BUNDLE=$(find ../../target/${{ matrix.target }}/release/bundle/macos -name "*.app.tar.gz" | head -n 1)
          UPDATER_SIG=$(find ../../target/${{ matrix.target }}/release/bundle/macos -name "*.app.tar.gz.sig" | head -n 1)

          if [ -n "$UPDATER_BUNDLE" ] && [ -n "$UPDATER_SIG" ]; then
            echo "Found updater artifacts:"
            echo "  Bundle: $UPDATER_BUNDLE"
            echo "  Signature: $UPDATER_SIG"

            # Copy to temp directory with consistent naming
            UPDATER_BUNDLE_NAME="Robert_${{ needs.create-release.outputs.tag_name }}_${{ matrix.arch }}.app.tar.gz"
            UPDATER_SIG_NAME="Robert_${{ needs.create-release.outputs.tag_name }}_${{ matrix.arch }}.app.tar.gz.sig"

            cp "$UPDATER_BUNDLE" "/tmp/$UPDATER_BUNDLE_NAME"
            cp "$UPDATER_SIG" "/tmp/$UPDATER_SIG_NAME"

            echo "UPDATER_BUNDLE_PATH=/tmp/$UPDATER_BUNDLE_NAME" >> $GITHUB_ENV
            echo "UPDATER_BUNDLE_NAME=$UPDATER_BUNDLE_NAME" >> $GITHUB_ENV
            echo "UPDATER_SIG_PATH=/tmp/$UPDATER_SIG_NAME" >> $GITHUB_ENV
            echo "UPDATER_SIG_NAME=$UPDATER_SIG_NAME" >> $GITHUB_ENV

            # Read signature content for manifest
            SIGNATURE_CONTENT=$(cat "$UPDATER_SIG")
            echo "SIGNATURE_CONTENT<<EOF" >> $GITHUB_ENV
            echo "$SIGNATURE_CONTENT" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          else
            echo "Warning: Updater artifacts not found"
            echo "UPDATER_BUNDLE_PATH=" >> $GITHUB_ENV
          fi

      - name: Upload to GitHub Release
        uses: actions/github-script@v7
        env:
          DMG_PATH: ${{ env.DMG_PATH }}
          DMG_NAME: ${{ env.DMG_NAME }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const assetName = process.env.DMG_NAME;
            const assetPath = process.env.DMG_PATH;
            const releaseId = ${{ needs.create-release.outputs.release_id }};

            // Check if asset already exists and delete it
            const { data: assets } = await github.rest.repos.listReleaseAssets({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: releaseId
            });

            const existingAsset = assets.find(asset => asset.name === assetName);
            if (existingAsset) {
              console.log(`Deleting existing asset: ${assetName} (ID: ${existingAsset.id})`);
              await github.rest.repos.deleteReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                asset_id: existingAsset.id
              });
            }

            // Upload the new asset
            console.log(`Uploading asset: ${assetName}`);
            await github.rest.repos.uploadReleaseAsset({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: releaseId,
              name: assetName,
              data: fs.readFileSync(assetPath)
            });

      - name: Upload to robert-releases repository
        env:
          RELEASES_REPO_TOKEN: ${{ secrets.RELEASES_REPO_TOKEN }}
        run: |
          # Check if release exists in robert-releases
          RELEASE_RESPONSE=$(curl -s -H "Authorization: token ${RELEASES_REPO_TOKEN}" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/lucky-tensor/robert-releases/releases/tags/${{ needs.create-release.outputs.tag_name }}")

          RELEASE_ID=$(echo "$RELEASE_RESPONSE" | jq -r '.id // empty')

          # If release doesn't exist, create it
          if [ -z "$RELEASE_ID" ]; then
            RELEASE_RESPONSE=$(curl -s -X POST \
              -H "Authorization: token ${RELEASES_REPO_TOKEN}" \
              -H "Accept: application/vnd.github+json" \
              "https://api.github.com/repos/lucky-tensor/robert-releases/releases" \
              -d "{
                \"tag_name\": \"${{ needs.create-release.outputs.tag_name }}\",
                \"name\": \"Robert ${{ needs.create-release.outputs.tag_name }}\",
                \"body\": \"Release assets for Robert ${{ needs.create-release.outputs.version_with_hash }}\",
                \"draft\": false,
                \"prerelease\": ${{ steps.prerelease.outputs.is_prerelease || 'false' }}
              }")
            RELEASE_ID=$(echo "$RELEASE_RESPONSE" | jq -r '.id')
          fi

          # Get assets for the release
          ASSETS=$(curl -s -H "Authorization: token ${RELEASES_REPO_TOKEN}" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/lucky-tensor/robert-releases/releases/${RELEASE_ID}/assets")

          # Check if asset with same name exists and delete it
          EXISTING_ASSET_ID=$(echo "$ASSETS" | jq -r ".[] | select(.name == \"${{ env.DMG_NAME }}\") | .id // empty")
          if [ -n "$EXISTING_ASSET_ID" ]; then
            echo "Deleting existing asset: ${{ env.DMG_NAME }} (ID: ${EXISTING_ASSET_ID})"
            curl -X DELETE \
              -H "Authorization: token ${RELEASES_REPO_TOKEN}" \
              -H "Accept: application/vnd.github+json" \
              "https://api.github.com/repos/lucky-tensor/robert-releases/releases/assets/${EXISTING_ASSET_ID}"
          fi

          # Get upload URL
          UPLOAD_URL=$(echo "$RELEASE_RESPONSE" | jq -r '.upload_url // empty')
          if [ -z "$UPLOAD_URL" ]; then
            # Fetch it again if we're using an existing release
            UPLOAD_URL=$(curl -s -H "Authorization: token ${RELEASES_REPO_TOKEN}" \
              -H "Accept: application/vnd.github+json" \
              "https://api.github.com/repos/lucky-tensor/robert-releases/releases/${RELEASE_ID}" | \
              jq -r '.upload_url')
          fi
          UPLOAD_URL=$(echo "$UPLOAD_URL" | sed 's/{?name,label}//')

          # Upload the DMG as a release asset
          echo "Uploading asset: ${{ env.DMG_NAME }}"
          curl -X POST \
            -H "Authorization: token ${RELEASES_REPO_TOKEN}" \
            -H "Content-Type: application/x-apple-diskimage" \
            "${UPLOAD_URL}?name=${{ env.DMG_NAME }}" \
            --data-binary @"${{ env.DMG_PATH }}"

          # Upload updater bundle if it exists
          if [ -n "${{ env.UPDATER_BUNDLE_PATH }}" ]; then
            # Check if updater bundle already exists and delete it
            EXISTING_BUNDLE_ID=$(curl -s -H "Authorization: token ${RELEASES_REPO_TOKEN}" \
              -H "Accept: application/vnd.github+json" \
              "https://api.github.com/repos/lucky-tensor/robert-releases/releases/${RELEASE_ID}/assets" | \
              jq -r ".[] | select(.name == \"${{ env.UPDATER_BUNDLE_NAME }}\") | .id // empty")

            if [ -n "$EXISTING_BUNDLE_ID" ]; then
              echo "Deleting existing updater bundle: ${{ env.UPDATER_BUNDLE_NAME }}"
              curl -X DELETE \
                -H "Authorization: token ${RELEASES_REPO_TOKEN}" \
                -H "Accept: application/vnd.github+json" \
                "https://api.github.com/repos/lucky-tensor/robert-releases/releases/assets/${EXISTING_BUNDLE_ID}"
            fi

            echo "Uploading updater bundle: ${{ env.UPDATER_BUNDLE_NAME }}"
            curl -X POST \
              -H "Authorization: token ${RELEASES_REPO_TOKEN}" \
              -H "Content-Type: application/gzip" \
              "${UPLOAD_URL}?name=${{ env.UPDATER_BUNDLE_NAME }}" \
              --data-binary @"${{ env.UPDATER_BUNDLE_PATH }}"

            echo "Updater bundle uploaded successfully"
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: robert-macos-${{ matrix.arch }}
          path: ${{ env.DMG_PATH }}
          retention-days: 30

  generate-updater-manifest:
    name: Generate Updater Manifest
    needs: [create-release, build-macos]
    runs-on: ubuntu-latest
    steps:
      - name: Generate latest.json manifest
        env:
          RELEASES_REPO_TOKEN: ${{ secrets.RELEASES_REPO_TOKEN }}
        run: |
          TAG_NAME="${{ needs.create-release.outputs.tag_name }}"

          # Fetch release assets from robert-releases
          echo "Fetching assets for release tag: $TAG_NAME"
          ASSETS_JSON=$(curl -s -H "Authorization: token ${RELEASES_REPO_TOKEN}" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/lucky-tensor/robert-releases/releases/tags/${TAG_NAME}")

          RELEASE_ID=$(echo "$ASSETS_JSON" | jq -r '.id')
          ASSETS=$(echo "$ASSETS_JSON" | jq -r '.assets')

          echo "Release ID: $RELEASE_ID"
          echo "Found assets: $(echo "$ASSETS" | jq -r '.[].name')"

          # Get release date
          PUB_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

          # Start building the manifest JSON
          cat > /tmp/latest.json <<EOF
          {
            "version": "${TAG_NAME}",
            "notes": "Release $TAG_NAME - See GitHub release for full details",
            "pub_date": "${PUB_DATE}",
            "platforms": {
          EOF

          # Add platforms
          FIRST=true

          # darwin-aarch64 (Apple Silicon)
          AARCH64_BUNDLE=$(echo "$ASSETS" | jq -r '.[] | select(.name | contains("aarch64.app.tar.gz") and (contains(".sig") | not)) | .browser_download_url')
          AARCH64_SIG_ASSET=$(echo "$ASSETS" | jq -r '.[] | select(.name | contains("aarch64.app.tar.gz.sig")) | .url')

          if [ -n "$AARCH64_BUNDLE" ] && [ -n "$AARCH64_SIG_ASSET" ]; then
            echo "Found aarch64 bundle: $AARCH64_BUNDLE"

            # Download signature file to read its content
            AARCH64_SIG=$(curl -s -L -H "Authorization: token ${RELEASES_REPO_TOKEN}" \
              -H "Accept: application/octet-stream" \
              "$AARCH64_SIG_ASSET")

            if [ "$FIRST" = false ]; then
              echo "," >> /tmp/latest.json
            fi
            FIRST=false

            cat >> /tmp/latest.json <<EOF
              "darwin-aarch64": {
                "signature": "$AARCH64_SIG",
                "url": "$AARCH64_BUNDLE"
              }
          EOF
          fi

          # darwin-x86_64 (Intel)
          X64_BUNDLE=$(echo "$ASSETS" | jq -r '.[] | select(.name | contains("x64.app.tar.gz") and (contains(".sig") | not)) | .browser_download_url')
          X64_SIG_ASSET=$(echo "$ASSETS" | jq -r '.[] | select(.name | contains("x64.app.tar.gz.sig")) | .url')

          if [ -n "$X64_BUNDLE" ] && [ -n "$X64_SIG_ASSET" ]; then
            echo "Found x64 bundle: $X64_BUNDLE"

            # Download signature file to read its content
            X64_SIG=$(curl -s -L -H "Authorization: token ${RELEASES_REPO_TOKEN}" \
              -H "Accept: application/octet-stream" \
              "$X64_SIG_ASSET")

            if [ "$FIRST" = false ]; then
              echo "," >> /tmp/latest.json
            fi
            FIRST=false

            cat >> /tmp/latest.json <<EOF
              "darwin-x86_64": {
                "signature": "$X64_SIG",
                "url": "$X64_BUNDLE"
              }
          EOF
          fi

          # Close JSON
          cat >> /tmp/latest.json <<EOF

            }
          }
          EOF

          echo "Generated manifest:"
          cat /tmp/latest.json

          # Upload latest.json to robert-releases repository
          echo "Uploading latest.json to robert-releases..."

          # Check if latest.json already exists and delete it
          EXISTING_JSON_ID=$(echo "$ASSETS" | jq -r '.[] | select(.name == "latest.json") | .id // empty')
          if [ -n "$EXISTING_JSON_ID" ]; then
            echo "Deleting existing latest.json (ID: ${EXISTING_JSON_ID})"
            curl -X DELETE \
              -H "Authorization: token ${RELEASES_REPO_TOKEN}" \
              -H "Accept: application/vnd.github+json" \
              "https://api.github.com/repos/lucky-tensor/robert-releases/releases/assets/${EXISTING_JSON_ID}"
          fi

          # Get upload URL
          UPLOAD_URL=$(echo "$ASSETS_JSON" | jq -r '.upload_url' | sed 's/{?name,label}//')

          # Upload latest.json
          curl -X POST \
            -H "Authorization: token ${RELEASES_REPO_TOKEN}" \
            -H "Content-Type: application/json" \
            "${UPLOAD_URL}?name=latest.json" \
            --data-binary @/tmp/latest.json

          echo "latest.json uploaded successfully"

  finalize-release:
    name: Finalize Release
    needs: [create-release, build-macos, generate-updater-manifest]
    runs-on: ubuntu-latest
    steps:
      - name: Publish Release
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: ${{ needs.create-release.outputs.release_id }},
              draft: false
            });
