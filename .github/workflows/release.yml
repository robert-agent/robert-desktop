name: Release

on:
  push:
    tags:
      - '*'
    branches:
      - 'canary-*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g., 0.1.0)'
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

permissions:
  contents: write

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
      tag_name: ${{ steps.get_tag.outputs.tag }}
      commit_hash: ${{ steps.get_commit.outputs.short_hash }}
      version_with_hash: ${{ steps.get_commit.outputs.version_with_hash }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version from Cargo.toml
        id: get_version
        run: |
          VERSION=$(grep -m 1 '^version = ' crates/robert-app/src-tauri/Cargo.toml | cut -d '"' -f 2)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Extracted version: $VERSION"

      - name: Get tag name
        id: get_tag
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "tag=${{ inputs.tag }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == refs/heads/canary-* ]]; then
            # For canary branches, use version from Cargo.toml with canary suffix
            BRANCH_NAME=${GITHUB_REF#refs/heads/}
            echo "tag=${{ steps.get_version.outputs.version }}-${BRANCH_NAME}" >> $GITHUB_OUTPUT
          else
            # For tag pushes, use the tag name but validate it matches Cargo.toml
            TAG_NAME=${GITHUB_REF#refs/tags/}
            echo "tag=$TAG_NAME" >> $GITHUB_OUTPUT
          fi

      - name: Get commit hash
        id: get_commit
        run: |
          SHORT_HASH=$(git rev-parse --short=7 HEAD)
          echo "short_hash=$SHORT_HASH" >> $GITHUB_OUTPUT
          echo "version_with_hash=${{ steps.get_tag.outputs.tag }}-$SHORT_HASH" >> $GITHUB_OUTPUT

      - name: Determine if prerelease
        id: prerelease
        run: |
          if [[ "${{ github.ref }}" == refs/heads/canary-* ]]; then
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
          fi

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_tag.outputs.tag }}
          release_name: Robert ${{ steps.get_tag.outputs.tag }}
          draft: true
          prerelease: ${{ steps.prerelease.outputs.is_prerelease }}
          body: |
            ## Robert Browser Automation - Release ${{ steps.get_tag.outputs.tag }}

            **Version:** ${{ steps.get_commit.outputs.version_with_hash }}
            **Commit:** `${{ steps.get_commit.outputs.short_hash }}`

            ### Downloads
            - **macOS (Apple Silicon)**: `Robert_${{ steps.get_commit.outputs.version_with_hash }}_aarch64.dmg`
            - **macOS (Intel)**: `Robert_${{ steps.get_commit.outputs.version_with_hash }}_x64.dmg`

            ### Installation
            1. Download the appropriate DMG file for your system
            2. Open the DMG and drag Robert to your Applications folder
            3. Launch Robert from Applications

            ### Changes
            <!-- Add release notes here -->

  build-macos:
    name: Build macOS
    needs: create-release
    strategy:
      matrix:
        include:
          - target: aarch64-apple-darwin
            arch: aarch64
            name: Apple Silicon
          - target: x86_64-apple-darwin
            arch: x64
            name: Intel
    runs-on: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: crates/robert-app/src-tauri
          shared-key: release-macos-${{ matrix.target }}

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install frontend dependencies
        working-directory: crates/robert-app
        run: bun install

      - name: Build Tauri app
        working-directory: crates/robert-app
        run: bunx tauri build --target ${{ matrix.target }}
        env:
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}

      - name: Rename DMG
        working-directory: crates/robert-app
        run: |
          DMG_PATH=$(find ../../target/${{ matrix.target }}/release/bundle/dmg -name "*.dmg" | head -n 1)
          if [ -z "$DMG_PATH" ]; then
            echo "Error: No DMG file found"
            exit 1
          fi
          DMG_NAME="Robert_${{ needs.create-release.outputs.version_with_hash }}_${{ matrix.arch }}.dmg"
          cp "$DMG_PATH" "/tmp/$DMG_NAME"
          echo "DMG_PATH=/tmp/$DMG_NAME" >> $GITHUB_ENV
          echo "DMG_NAME=$DMG_NAME" >> $GITHUB_ENV

      - name: Upload to GitHub Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ env.DMG_PATH }}
          asset_name: ${{ env.DMG_NAME }}
          asset_content_type: application/x-apple-diskimage

      - name: Upload to robert-releases repository
        env:
          RELEASES_REPO_TOKEN: ${{ secrets.RELEASES_REPO_TOKEN }}
        run: |
          # Check if release exists in robert-releases
          RELEASE_ID=$(curl -s -H "Authorization: token ${RELEASES_REPO_TOKEN}" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/lucky-tensor/robert-releases/releases/tags/${{ needs.create-release.outputs.tag_name }}" | \
            jq -r '.id // empty')

          # If release doesn't exist, create it
          if [ -z "$RELEASE_ID" ]; then
            RELEASE_RESPONSE=$(curl -s -X POST \
              -H "Authorization: token ${RELEASES_REPO_TOKEN}" \
              -H "Accept: application/vnd.github+json" \
              "https://api.github.com/repos/lucky-tensor/robert-releases/releases" \
              -d "{
                \"tag_name\": \"${{ needs.create-release.outputs.tag_name }}\",
                \"name\": \"Robert ${{ needs.create-release.outputs.tag_name }}\",
                \"body\": \"Release assets for Robert ${{ needs.create-release.outputs.version_with_hash }}\",
                \"draft\": false,
                \"prerelease\": ${{ steps.prerelease.outputs.is_prerelease || 'false' }}
              }")
            RELEASE_ID=$(echo "$RELEASE_RESPONSE" | jq -r '.id')
            UPLOAD_URL=$(echo "$RELEASE_RESPONSE" | jq -r '.upload_url' | sed 's/{?name,label}//')
          else
            # Get upload URL for existing release
            UPLOAD_URL=$(curl -s -H "Authorization: token ${RELEASES_REPO_TOKEN}" \
              -H "Accept: application/vnd.github+json" \
              "https://api.github.com/repos/lucky-tensor/robert-releases/releases/${RELEASE_ID}" | \
              jq -r '.upload_url' | sed 's/{?name,label}//')
          fi

          # Upload the DMG as a release asset
          curl -X POST \
            -H "Authorization: token ${RELEASES_REPO_TOKEN}" \
            -H "Content-Type: application/x-apple-diskimage" \
            "${UPLOAD_URL}?name=${{ env.DMG_NAME }}" \
            --data-binary @"${{ env.DMG_PATH }}"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: robert-macos-${{ matrix.arch }}
          path: ${{ env.DMG_PATH }}
          retention-days: 30

  finalize-release:
    name: Finalize Release
    needs: [create-release, build-macos]
    runs-on: ubuntu-latest
    steps:
      - name: Publish Release
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: ${{ needs.create-release.outputs.release_id }},
              draft: false
            });
